:root {
  --foreground: #4d4d4c;
  --background: #ffffff;
  --popover-background: #ffffffa0;
  --selection: #d6d6d6;
  --line: #efefef;
  --comment: #8e908c;
  --red: #c82829;
  --orange: #f5871f;
  --yellow: #eab700;
  --green: #718c00;
  --aqua: #3e999f;
  --blue: #4271ae;
  --purple: #8959a8;
  --window: #efefef;
  color-scheme: light dark;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground: #c5c8c6;
    --background: #1d1f21;
    --popover-background: #1d1f21a0;
    --selection: #373b41;
    --line: #282a2e;
    --comment: #969896;
    --red: #cc6666;
    --orange: #de935f;
    --yellow: #f0c674;
    --green: #b5bd68;
    --aqua: #8abeb7;
    --blue: #81a2be;
    --purple: #b294bb;
    --window: #4d5057;
  }
}

:root {
  --toolbar-fg: var(--blue);
  --toolbar-bg: var(--window);
  --popover-backdrop: blur(5px);
}

* {
  margin: 0;
  padding: 0;
}

*:focus {
  outline: none;
}

code {
  white-space: pre;
  font-family: var(--monospace-family);
}

h1,h2,h3,h4,h5,h6 {
  font-weight: normal;
  & > code {
    white-space: pre-wrap;
  }
}

body {
  width: 100%;
  height: 100%;
  font-family: system-ui;
  line-height: 1.5;
  background-color: var(--background);
  color: var(--foreground);

  --monospace-family: Menlo, monospace;
  --monospace-size: 13px;
}

a { color: var(--blue); }
a:visited { color: var(--purple); }
a:active { color: var(--red); }

.cm-content {
  font-family: var(--monospace-family);
  font-size: var(--monospace-size);
}

html {
  height: 100%;
}

main {
  padding: 0.5em;
  display: block;
  margin: 0 auto;
  max-width: 768px;
}

ul {
  list-style-position: inside;
  ul {
    padding-left: 2em;
  }
}

main > *+h1,
main > *+h2,
main > *+h3,
main > *+h4,
main > *+h5,
main > *+h6,
main > *+p,
main > *+ul,
main > *+div,
main > *+pre {
  margin-top: 1rem;
}

main .help-entry {
  position: relative;
  &::before {
    content: "# ";
    color: var(--comment);
    position: absolute;
    left: -2rem;
  }
 .source-link {
    font-size: initial;
  }
}

header {
  --header-height: 40px;
  --header-padding: 0.5em;
  --text-color: #1d1f21;
  color: var(--text-color);
  background-image: linear-gradient(to right, #bae5ff, #feb2fd);
  height: var(--header-height);
  line-height: var(--header-height);
  display: flex;
  .title, .spacer {
    flex: 1;
  }

  a {
    text-decoration: none;
    &.text-link {
      padding: 0 var(--header-padding);
    }
    &, &:visited, &:active {
      color: var(--text-color);
    }
  }

  svg {
    fill: var(--text-color);
    width: 24px;
    height: 24px;
  }

  > :first-child {
    padding-left: var(--header-padding);
  }
  > :last-child {
    padding-right: var(--header-padding);
  }
  .image-link {
    display: flex;
    width: var(--header-height);
    height: var(--header-height);
    justify-content: center;
    align-items: center;
  }
}

.bauble-placeholder, pre.example {
  height: 256px;
  border-radius: 2px;
  overflow: hidden;
  border: solid 2px var(--window);
  box-sizing: content-box; /* This is important because the canvas is exactly 256px tall */
  @media all and (max-width: 512px) {
    height: 512px;
  }
}

.bauble-placeholder {
  .canvas-container, .code-container {
    position: relative;
  }
  .bauble canvas {
    max-height: calc(min(100%, var(--canvas-height)));
  }
  .toolbar {
    background-color: initial;
  }
  .toolbar:last-child {
    bottom: 0;
  }
  .toolbar {
    z-index: 1;
    position: absolute;
    left: 0;
    right: 0;
  }
  .code-container .toolbar {
    background-image: none;
    border: none;
    pointer-events: none;
    .indicator.compilation-error svg {
      fill: var(--background);
    }
  }
  .canvas-container {
    .toolbar {
      transition: visibility 0s 300ms, opacity 150ms 300ms;
      input[inputmode="numeric"] {
        background: transparent;
      }
    }
    &:not(:hover) .toolbar {
      opacity: 0;
      visibility: hidden;
      transition: visibility 0s 450ms, opacity 150ms 300ms;
    }
  }
}

body.main-page {
  display: flex;
  flex-direction: column;
  .bauble {
    flex: 1;
  }
}

.bauble {
  --control-height: 40px;
  --horizontal-grip: linear-gradient(to bottom, rgba(0,0,0,0.15), rgba(0,0,0,0), rgba(0,0,0,0.2));
  --vertical-grip: linear-gradient(to right, rgba(0,0,0,0.15), rgba(0,0,0,0), rgba(0,0,0,0.2));

  height: 100%;
  display: flex;
  overflow: hidden;
  flex-direction: row-reverse;

  > * { overflow: hidden; }

  .code-container {
    display: flex;
    flex-direction: column;
    /* TODO: this should be width OR height depending on orientation */
    flex: 1 1 var(--canvas-width);
  }

  .canvas-container {
    display: flex;
    justify-content: start;
    align-items: center;
    flex-direction: column;
    /* TODO: this should be width OR height depending on orientation */
    flex: 0 1 var(--canvas-width);
  }

  .editor-container {
    overflow: hidden;
    display: flex;
    flex: 1;
  }

  .editor-container > * {
    flex: 1;
    max-width: 100%; /* required for horizontal scrolling */
  }

  .output-resize-handle {
    cursor: ns-resize;
    touch-action: none;
    background-color: var(--toolbar-bg);
    background-image: var(--horizontal-grip);
    flex: none;
    flex-basis: 4px;
  }

  .resize-handle {
    flex: none;
    flex-basis: 4px;
    touch-action: none;
  }

  .canvas-resize-handle {
    cursor: ew-resize;
    background-color: var(--toolbar-bg);
    background-image: var(--vertical-grip);
  }

  .output-container:not(:empty) {
    padding: 8px;
  }
  .output-container {
    overflow: auto;
    max-height: 25%;
  }

  .output-container .err {
    color: var(--red);
  }

  .output-container, .toolbar input[inputmode=numeric] {
    font-family: var(--monospace-family);
    font-size: var(--monospace-size);
  }

  canvas {
    max-width: calc(min(100%, var(--canvas-width)));
    max-height: calc(min(100% - 2 * var(--control-height), var(--canvas-height)));
    touch-action: none;
  }

  @media all and (max-width: 512px) {
    flex-direction: column;
    .resize-handle { flex-basis: 12px; }
    .canvas-resize-handle { background: var(--horizontal-grip); cursor: ns-resize; }
    .output-container { height: 1.5em; }
  }
}

.toolbar {
  width: 100%;
  height: var(--control-height);
  line-height: var(--control-height);
  display: flex;
  user-select: none;
  background-color: var(--window);
  flex: none;
  overflow-y: hidden;
  overflow-x: auto;
  color: var(--toolbar-fg);
  fill: var(--toolbar-fg);
  background-color: var(--toolbar-bg);
  background-image: linear-gradient(to bottom, rgba(0,0,0,0), rgba(0,0,0,0.1));
  box-sizing: border-box;

  &:last-child {
    border-top: solid 1px rgba(0,0,0,0.25);
  }
  &:not(:last-child) {
    border-bottom: solid 1px rgba(0,0,0,0.25);
  }

  button:not(.hidden:first-child)+button, label+label {
    margin-left: -6px;
  }

  [popover] {
    background: inherit;
    border: inherit;
    border-top-width: 0;
    border-radius: 0 0 4px 4px;
    color: var(--foreground);
    padding: 0 4px;
    max-width: 300px;
    line-height: 1.5em;
    > *+* {
      margin-top: 1em;
    }
  }

  .spacer {
    flex: 1;
  }
  .scrubber {
    flex: 1;
    background-color: #8f8;
  }
  .timestamp {
    padding: 0 1ch;
    font-family: var(--monospace-family);
    font-size: var(--monospace-size);
  }
  input[inputmode=numeric] {
    text-align: center;
    border: none;
    width: 6ch;
    color: var(--toolbar-fg);
    background-color: var(--toolbar-bg);
    box-shadow: inset 0 0 3px rgba(0,0,0,0.5);
    border-radius: 2px;
    margin: 4px 0;
  }
  input[inputmode=numeric]:last-child {
    margin-right: 4px;
  }

  .text {
    padding: 0 4px;
  }

  fieldset {
    display: inline;
    border: none;
    padding: none;
    white-space: nowrap;
  }

  button {
    min-width: var(--control-height);
    border: none;
    cursor: pointer;
    background-color: initial;
    color: inherit;
  }

  fieldset label {
    display: inline-block;
    height: 100%;
    cursor: pointer;
    min-width: var(--control-height);
    text-align: center;
  }

  fieldset input[type=radio] {
    display: none;
  }

  button > *,
  fieldset input[type=radio] + span,
  fieldset input[type=radio] + svg {
    padding: 4px;
    border-radius: 6px;
  }

  fieldset input[type=radio]:checked + span,
  fieldset input[type=radio]:checked + svg {
    background-color: rgba(0, 0, 0, 0.15);
  }

  button:hover > *,
  fieldset label:hover input[type=radio] + span,
  fieldset label:hover input[type=radio] + svg {
    background-color: rgba(0, 0, 0, 0.1);
  }

  button:active svg,
  fieldset label:hover input[type=radio]:checked + span,
  fieldset label:hover input[type=radio]:checked + svg {
    background-color: rgba(0, 0, 0, 0.2);
  }

  .indicator {
    min-width: var(--control-height);
    display: flex;
  }
  fieldset {
    display: flex;
    flex-direction: row;
  }
  .indicator,
  fieldset label,
  button {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .indicator svg {
    border-radius: 12px;
    padding: 2px;
  }
  .indicator.compilation-error svg {
    background-color: var(--red);
    fill: var(--toolbar-bg);
  }
  .hidden {
    display: none;
  }
  .indicator svg,
  fieldset label svg,
  button > svg {
    width: 20px;
    height: 20px;
  }
  button > div {
    height: 20px;
    line-height: 20px;
    margin: 0 6px;
  }
}

/* for some reason you can't add these rules to the theme */
.cm-tooltip-autocomplete {
  & .cm-completionIcon-function+.cm-completionLabel::before,
  & .cm-completionIcon-text+.cm-completionLabel::before {
    content: "(";
  }

  & .cm-completionIcon-function+.cm-completionLabel:last-child::after,
  & .cm-completionIcon-text+.cm-completionLabel:last-child::after {
    content: ")";
  }

  & .cm-completionIcon-function+.cm-completionLabel+.cm-completionDetail::after,
  & .cm-completionIcon-text+.cm-completionLabel+.cm-completionDetail::after {
    content: ")";
    font-style: normal;
  }
}
