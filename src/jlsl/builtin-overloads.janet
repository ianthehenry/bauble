(use judge)
(use ./dsl)
(use ./builtins)
(use ./builtin-test-helpers)

(jlsl/overload :float min [:vec2 v] (return (min (. v x) (. v y))))
(jlsl/overload :float min [:vec3 v] (return (min (. v x) (min (. v y) (. v z)))))
(jlsl/overload :float min [:vec4 v] (return (min (min (. v x) (. v y)) (min (. v z) (. v w)))))
(jlsl/overload :float max [:vec2 v] (return (max (. v x) (. v y))))
(jlsl/overload :float max [:vec3 v] (return (max (. v x) (max (. v y) (. v z)))))
(jlsl/overload :float max [:vec4 v] (return (max (max (. v x) (. v y)) (max (. v z) (. v w)))))
(jlsl/overload :vec2 pow [:vec2 v :float e] (return (pow v (vec2 e))))
(jlsl/overload :vec3 pow [:vec3 v :float e] (return (pow v (vec3 e))))
(jlsl/overload :vec4 pow [:vec4 v :float e] (return (pow v (vec4 e))))
(jlsl/overload :float dot [:vec2 v] (return (dot v v)))
(jlsl/overload :float dot [:vec3 v] (return (dot v v)))
(jlsl/overload :float dot [:vec4 v] (return (dot v v)))

(typecheck (min [1 2] [1 2]) [:vec2 :vec2 -> :vec2])
(typecheck (min [1 2]) [:vec2 -> :float])
(typecheck (min [1 2 3]) [:vec3 -> :float])
(typecheck (min [1 2 3 4]) [:vec4 -> :float])
